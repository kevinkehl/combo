// Code generated by go-bindata.
// sources:
// http/resources/combo.css
// http/resources/combo.html
// http/resources/combo.js
// DO NOT EDIT!

package http

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _comboCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xcf\x6e\xd4\x30\x10\xc6\xef\x79\x8a\x91\x10\x97\x95\x9c\xee\x22\xed\x81\xf4\x84\xaa\x1e\x2a\xb1\x5c\x80\x07\x70\xec\x49\x32\xaa\xd7\x8e\x6c\xe7\x1f\x15\xef\xce\x4c\x9a\x56\x2d\xb0\xa0\x9e\x6c\xcf\x7c\x9f\xe7\x37\x1e\x5f\xed\x0a\x00\xb8\x09\xfd\x12\xa9\xed\x32\x7c\xd8\x1f\x8e\x70\x1a\x28\xc2\x49\x7b\x8b\x31\x95\x00\x9f\x9c\x83\x35\x9b\x20\x62\xc2\x38\xa2\x2d\xc5\xf5\x3d\x21\x84\x06\x72\x47\x09\x52\x18\xa2\x41\x30\xc1\x22\xf0\xb1\x0d\x23\x46\x8f\x16\xea\x05\x34\x9c\xee\xbe\xa9\x94\x17\x87\xe2\x72\x64\xd0\xb3\x33\x77\x3a\x83\xd1\x1e\x6a\x84\x26\x0c\xde\x02\x79\x0e\x22\x7c\xbe\xbb\xb9\xfd\xf2\xf5\x16\x1a\x72\x58\x16\xbb\xab\x62\x07\x0f\x6c\xac\xc3\xac\x12\xfd\x20\xdf\x56\xbc\x8f\xcc\xa6\x38\x74\x5d\xfc\x2c\x8a\x77\x75\xd0\xd1\xae\xaa\x89\x6c\xee\x2a\xf8\x78\x1c\xcf\xe4\xaf\x39\xd0\xa1\x90\xbf\x8c\x3c\x9a\x2b\x38\xf4\x33\x63\x3b\x62\x48\xa7\xcd\xbd\xa4\x2c\xa5\xde\xe9\xa5\x82\xc6\xe1\xfc\x2a\xa0\x26\xac\xef\x29\xab\xa7\x84\xac\xca\x52\x44\x93\x29\xf8\x8a\x1b\x77\xc3\x79\xbd\xfe\xa5\xf2\x6f\x0a\xe6\x2d\x63\x98\x56\x5a\xd1\x30\xc8\xef\xb6\x2d\xb4\xf5\x72\xd8\xef\xdf\xbf\x05\x4e\x0a\x18\xe4\x99\xfd\xbf\xc2\x3f\x9e\xa2\xe6\xb5\x8d\x32\x17\xc5\xe4\x81\x45\xa6\x0b\xbc\xd3\x19\xd7\xfe\x83\xcf\x32\x0e\x14\xbe\xa7\x97\xcd\x38\x67\xa5\x1d\xb5\xd2\x2e\xfa\x8c\xf1\x91\xa6\x27\xe4\xbf\xf1\xf0\x5c\x50\x45\x6d\x69\x48\x15\x1c\xa5\x33\x51\x4c\x1d\xe5\x4d\xf1\x47\xdd\x35\x27\xd7\x6f\xe7\x0d\x51\x6c\xeb\xf6\x82\xed\xb9\x93\xd7\xd7\x88\x6d\x64\x46\xab\xce\xfc\x47\x2f\x78\xdb\x88\x28\xa3\xfa\x15\x00\x00\xff\xff\x9a\x5b\x13\x25\x1e\x03\x00\x00")

func comboCssBytes() ([]byte, error) {
	return bindataRead(
		_comboCss,
		"combo.css",
	)
}

func comboCss() (*asset, error) {
	bytes, err := comboCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.css", size: 798, mode: os.FileMode(420), modTime: time.Unix(1434691216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _comboHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x90\xb1\x8e\xdb\x30\x10\x44\x7b\x7d\xc5\x46\xbd\xc8\xc8\x48\x9a\x40\x32\x10\x18\x2e\x0c\xc4\x69\x92\x7c\x00\x45\xae\xa4\x75\x68\x52\xe1\xae\x0c\xeb\xef\x43\x49\x07\x5c\x71\xc5\x15\x57\x11\x33\x3b\xf3\x48\x6e\xf3\xa9\xaa\x8a\x53\x9c\x96\x44\xc3\x28\x70\xf8\x5c\x7f\x85\xeb\x4c\x09\xae\x26\x38\x4c\xac\x00\xbe\x7b\x0f\xdb\x94\x21\x21\x63\x7a\xa0\x53\xc5\x1f\x46\x88\x3d\xc8\x48\x0c\x1c\xe7\x64\x11\x6c\x74\x08\x59\x0e\xf1\x81\x29\xa0\x83\x6e\x01\x03\xd7\xcb\xef\x8a\x65\xf1\x58\x78\xb2\x18\x72\x4d\x46\x23\x60\x4d\x80\x0e\xa1\x8f\x73\x70\x40\x21\x9b\x08\x3f\x2e\xa7\xf3\xcf\x5f\x67\xe8\xc9\xa3\x2a\xaa\xea\x58\x34\xa3\xdc\xfd\x7a\xa0\x71\xc7\x02\xa0\xf1\x14\xfe\xe6\x57\xf8\xb6\xdc\x98\x3c\x22\x4a\x09\xb2\x4c\xd8\x96\x82\x4f\xd1\x96\xb9\x84\x31\x61\xdf\x96\x36\xde\xbb\xa8\x56\x63\xab\xb2\x4d\x34\x09\x70\xb2\x6d\x39\x8a\x4c\xfc\x4d\x6b\x73\x33\x4f\x35\xc4\x38\x78\x34\x13\xb1\xca\x95\xcd\xd3\x9e\x3a\xd6\xb7\x7f\x33\xa6\x45\x1f\x54\xad\xbe\xbc\x08\x75\xa7\xa0\x6e\x99\xd8\xe8\x9d\xf7\x21\xf4\x4c\xba\x56\xf5\x2b\xbd\x9a\xe9\xfd\x0b\xf4\xfe\xaf\x37\x19\x21\xf1\x78\x3c\xad\xc3\x46\xef\xa2\x68\xf4\xbe\xb9\xa6\x8b\x6e\xd9\x52\x8e\x1e\x40\xae\x2d\xbb\x68\x92\x5b\x09\xd9\x58\x73\x7b\x20\xe7\xd7\x85\xff\x0f\x00\x00\xff\xff\xd4\x15\x46\x95\x15\x02\x00\x00")

func comboHtmlBytes() ([]byte, error) {
	return bindataRead(
		_comboHtml,
		"combo.html",
	)
}

func comboHtml() (*asset, error) {
	bytes, err := comboHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.html", size: 533, mode: os.FileMode(420), modTime: time.Unix(1434691311, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _comboJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x0c\xd4\x1c\x64\x78\x97\x9b\x16\x08\x5a\xd8\x49\x8b\x22\xc8\x21\x45\x37\x3d\x6c\x8a\x1e\x16\x8b\x05\x2d\xd1\x36\xb1\xb2\xa8\x92\xf4\x87\x90\xf8\xbf\x77\x66\x28\x89\x94\x6d\x2c\x7a\xb1\xac\x99\xe1\xe3\x70\xf8\xe6\x8d\xee\xee\xe0\xa3\x69\x5a\xab\xd7\x1b\x0f\x3f\xbd\xfd\xf1\x1d\xdc\xef\xb4\x85\x7b\x59\x97\xca\x3a\x01\xf0\x7b\x55\x01\x7b\x1d\x58\xe5\x94\xdd\xab\x52\x4c\x70\xd5\xdf\x4e\x81\x59\x81\xdf\x68\x07\xce\xec\x6c\xa1\xa0\x30\xa5\x02\x7c\x5d\x9b\xbd\xb2\xb5\x2a\x61\xd9\x82\x84\xfb\xcf\x5f\x6f\x9d\x6f\x2b\x45\xab\x2a\x5d\xa8\x1a\x57\xfa\x8d\xf4\x50\xc8\x1a\x96\x0a\x56\x66\x57\x97\xa0\x6b\x34\x2a\xf8\xf3\xf3\xc7\x4f\x5f\x1e\x3e\xc1\x4a\x57\x4a\x4c\x26\x7b\x69\x11\x76\xbb\x34\xf0\x01\xbe\x9d\x16\x93\x09\xbf\x08\x5d\x6b\xff\xbc\x34\xd2\x96\x68\x5f\xed\xea\xc2\x6b\x53\xe7\x07\x5d\xfa\xcd\x0d\x6c\x14\xa5\x3b\x85\x6f\x13\x00\x5e\xaf\xaa\xca\x61\xdc\xe3\x13\xae\x07\xce\x58\x70\x28\xda\xf8\xb9\xe8\xad\x61\x25\x9a\xc3\x1f\x0e\x5f\x19\x0b\x39\xc1\xb4\x68\x7f\xbb\xc0\xc7\xfb\xde\x0d\xed\x6c\x16\xb6\x81\xb0\xc9\x63\xfb\xd4\xed\x43\x26\x5a\x64\xcd\x01\x2d\x6f\xf2\xec\x7d\xa9\xf7\x50\x54\xd2\xb9\x0f\x68\xfb\x35\x9b\x86\x98\x01\xfd\x18\xd0\x8f\x88\x1e\x72\x82\x63\x04\x8f\xf0\x8f\xc7\xa7\x0b\x3c\xf2\x21\xa0\x90\xde\xdb\x3c\x2b\xa5\x97\xb7\xc7\xec\x06\x8e\x23\x4b\x8b\x96\x16\x2d\x4d\xa3\xea\xf2\xab\xc9\x31\x89\xa9\x28\xad\x69\x1a\xb9\xac\x54\xde\xef\x83\x85\x30\x95\xb2\xb2\x2e\xd4\x1c\x32\x5d\x7b\x24\x81\x2a\x7c\x76\x33\xf8\x65\x51\xa8\xc6\xa3\x53\x78\x73\x9b\xcd\x8e\xb3\x0c\x7f\xdb\xd4\xef\xf5\x5e\x7d\xa4\xcc\x30\x68\x2f\x2b\x5d\xde\x6e\x91\x10\x09\x04\x6d\x3b\x8f\xd7\xa6\xf6\xaa\xf6\x37\xb0\xd3\xf1\xb8\x7c\x64\xbe\xe9\x83\x13\x0e\x33\xce\xff\x78\xf8\xeb\x8b\x70\xde\xea\x7a\xad\x57\x6d\x9e\x06\x72\xe8\x16\x09\x8b\xfb\x9d\xed\xc4\x09\xd9\x35\x66\x32\x5e\x80\x85\xb7\x66\x8b\xd6\xe3\x1c\x66\x3b\x8d\x85\x90\xeb\x35\x15\x62\x5c\xc4\x29\xd6\xec\x95\x80\x36\x9b\x9e\x6e\xce\x70\xbd\xe9\x50\xdf\xe4\x44\xa9\xe9\x55\xc0\x2b\x3e\xc2\x1a\x41\xa5\x6f\xa7\x69\x47\x97\xd4\x71\xea\x6c\xe1\x1d\xef\x33\x5e\x6e\xf6\x03\xf7\x46\x20\xd9\x69\x20\x7d\xdf\x08\xfc\x5c\x4c\x62\x3b\x19\x5c\xf7\x7c\x70\x69\x2f\xc5\xf6\xe9\x5b\xe5\x97\xbe\xb3\xe8\x3f\xb7\x06\x7b\x69\x55\x68\x29\xfa\x57\xab\x03\xfc\xa3\x96\x0f\xa6\x78\x51\x3e\xcf\x0e\x6e\x7e\x77\x97\xc1\x0c\x2a\x53\x48\xc2\x15\x1b\xe3\x3c\xbe\x67\x77\x85\xa9\x6b\x62\xd6\x94\xa1\xf0\x9a\x4d\xbd\x55\xce\xc9\xb5\x4a\xd3\x60\x6e\xf4\xbc\xe0\x66\xde\x52\xcb\x33\x1b\x1a\x89\xdc\x0c\x11\x82\x6a\xd8\xd5\xc3\x1d\xb4\x2f\x36\x90\x63\xa4\xe8\x88\x91\xf4\x91\x44\xf1\x09\x2c\x99\x4f\x52\x9e\x91\x89\x97\x10\x5d\x86\x6a\x2f\xad\x92\x2f\xb1\xcc\xa7\x98\x2b\x95\xec\xb2\x5e\xec\x7c\x8d\xaf\x91\xa9\x58\xa9\xe7\xb5\xdc\x46\xb6\x9e\xf3\x94\xeb\x3e\x0f\x8f\xc8\xb2\x70\x05\xf3\xee\x39\x49\x29\xc1\x2c\x99\xc4\x23\x45\x91\x3c\x53\xc6\xc5\xf8\x28\xca\x5a\x54\xa1\xb4\xe8\x83\xa8\x99\xda\xa1\x1c\x88\xca\xac\xf1\x2e\xd5\xd2\xf1\xb5\x02\x2f\xc0\x23\xe0\x3d\xaa\x1e\x2c\x92\x89\x2a\x99\xa2\x71\x41\x07\x36\x91\xd7\x75\x62\x1e\x2c\xae\xa9\xb4\xef\x4d\xa9\xe0\xea\x20\x89\x1a\x25\x91\x30\x18\xd8\x89\x4a\xd5\x6b\x92\x47\x1d\xe5\x91\x71\x31\x38\x46\x3d\xea\xa7\xae\x14\xe4\xa3\x5e\x47\xf7\x56\xd0\x1f\x71\x24\xfa\xdd\x52\xf2\x9d\xa1\x8d\x72\xed\x0d\xc7\x79\x33\x8a\xc2\xd7\x36\x81\xf3\x6d\xa3\x38\x8c\x33\x87\xdf\xfa\x13\xcc\xc3\xe1\x02\x1a\x05\x3d\x12\x3c\xe9\x75\xf2\xf2\xfd\xfb\x30\x1f\xa2\x55\x34\x3b\xb7\xc9\xbd\x89\xfd\x7a\x6d\x2e\xc4\xc1\x35\x1a\x0e\xd7\x06\x54\x32\xcd\x46\x53\xaa\xab\xf8\xbf\x3b\x69\x55\x5f\x30\x66\x08\xce\x15\x9c\x2e\xdd\x21\xe3\xd8\x24\xb1\xe0\x4b\x4d\xe6\xcf\x22\x89\x69\xb4\x2a\x54\xa7\x28\x62\xa5\x91\xf7\x99\x60\x5b\x36\x1d\xb0\xf4\x0a\xf2\xb0\x63\x70\x3d\x17\x38\xef\x51\x44\x30\xd9\x54\xf0\xd9\x27\xac\xe2\x46\x1c\x1a\xf0\x04\xaa\xc2\x8e\x8d\x61\x84\x16\x42\x03\x11\x2e\x70\x60\x48\x6a\x3c\x25\xd9\xca\x63\xb2\x57\x49\x4a\x3a\xd1\xd5\x3e\x85\x8b\x31\xfa\x6a\x48\x98\xab\xa9\x3a\x9f\x9d\xc8\xab\xa3\xbf\x72\xfe\x78\xc2\x7e\x41\x5a\x00\x1e\x9f\xb1\x0a\xdd\xae\x65\x19\xec\xd9\xff\x28\x71\x45\x2d\xfd\x01\xb2\xc3\x46\x7b\x0c\xbd\x28\x74\x04\xeb\x22\xce\x2a\xfe\x0a\xe4\xb2\x92\xc5\xcb\xab\x90\x5d\xc4\xc5\x11\x43\x8b\x51\xaf\x87\x2e\xed\x3e\x1e\x06\x4a\xd1\xa6\xe8\xbf\x84\x1e\xc6\xef\x68\xf0\x5b\xd4\x7e\xeb\xf9\x3b\x85\xbf\x33\x46\x83\xdf\x34\xb2\xd0\x1e\xa7\xed\x5b\xf1\xf3\xbb\x78\x3d\xb1\x68\xd7\x95\x06\xb7\xbf\x26\x31\xd7\xcf\x49\x5f\x40\xa8\x10\xb8\x06\x05\xe7\xda\x88\x8e\x93\x83\x05\xf2\x4d\x3e\x9a\xb7\x62\x49\x1d\xc3\x26\x92\xee\xff\x02\x00\x00\xff\xff\x51\x65\xe7\xbe\x8b\x0b\x00\x00")

func comboJsBytes() ([]byte, error) {
	return bindataRead(
		_comboJs,
		"combo.js",
	)
}

func comboJs() (*asset, error) {
	bytes, err := comboJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "combo.js", size: 2955, mode: os.FileMode(420), modTime: time.Unix(1434691177, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"combo.css": comboCss,
	"combo.html": comboHtml,
	"combo.js": comboJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"combo.css": &bintree{comboCss, map[string]*bintree{
	}},
	"combo.html": &bintree{comboHtml, map[string]*bintree{
	}},
	"combo.js": &bintree{comboJs, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

